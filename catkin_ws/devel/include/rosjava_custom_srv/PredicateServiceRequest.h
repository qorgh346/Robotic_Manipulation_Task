// Generated by gencpp from file rosjava_custom_srv/PredicateServiceRequest.msg
// DO NOT EDIT!


#ifndef ROSJAVA_CUSTOM_SRV_MESSAGE_PREDICATESERVICEREQUEST_H
#define ROSJAVA_CUSTOM_SRV_MESSAGE_PREDICATESERVICEREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace rosjava_custom_srv
{
template <class ContainerAllocator>
struct PredicateServiceRequest_
{
  typedef PredicateServiceRequest_<ContainerAllocator> Type;

  PredicateServiceRequest_()
    : predicate()
    , param1()
    , param2()
    , param3()
    , param4()  {
    }
  PredicateServiceRequest_(const ContainerAllocator& _alloc)
    : predicate(_alloc)
    , param1(_alloc)
    , param2(_alloc)
    , param3(_alloc)
    , param4(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _predicate_type;
  _predicate_type predicate;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _param1_type;
  _param1_type param1;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _param2_type;
  _param2_type param2;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _param3_type;
  _param3_type param3;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _param4_type;
  _param4_type param4;





  typedef boost::shared_ptr< ::rosjava_custom_srv::PredicateServiceRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rosjava_custom_srv::PredicateServiceRequest_<ContainerAllocator> const> ConstPtr;

}; // struct PredicateServiceRequest_

typedef ::rosjava_custom_srv::PredicateServiceRequest_<std::allocator<void> > PredicateServiceRequest;

typedef boost::shared_ptr< ::rosjava_custom_srv::PredicateServiceRequest > PredicateServiceRequestPtr;
typedef boost::shared_ptr< ::rosjava_custom_srv::PredicateServiceRequest const> PredicateServiceRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rosjava_custom_srv::PredicateServiceRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rosjava_custom_srv::PredicateServiceRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace rosjava_custom_srv

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'rosjava_custom_srv': ['/home/test/Downloads/190816_cmtm_code/catkin_ws/src/rosjava_custom_srv/msg'], 'actionlib_msgs': ['/home/test/Downloads/190816_cmtm_code/catkin_ws/src/common_msgs/actionlib_msgs/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'moveit_msgs': ['/home/test/Downloads/190816_cmtm_code/catkin_ws/devel/share/moveit_msgs/msg', '/home/test/Downloads/190816_cmtm_code/catkin_ws/src/moveit_msgs/msg'], 'trajectory_msgs': ['/home/test/Downloads/190816_cmtm_code/catkin_ws/src/common_msgs/trajectory_msgs/msg'], 'sensor_msgs': ['/home/test/Downloads/190816_cmtm_code/catkin_ws/src/common_msgs/sensor_msgs/msg'], 'shape_msgs': ['/home/test/Downloads/190816_cmtm_code/catkin_ws/src/common_msgs/shape_msgs/msg'], 'octomap_msgs': ['/home/test/Downloads/190816_cmtm_code/catkin_ws/src/octomap_msgs/msg'], 'object_recognition_msgs': ['/home/test/Downloads/190816_cmtm_code/catkin_ws/devel/share/object_recognition_msgs/msg', '/home/test/Downloads/190816_cmtm_code/catkin_ws/src/object_recognition_msgs/msg'], 'geometry_msgs': ['/home/test/Downloads/190816_cmtm_code/catkin_ws/src/common_msgs/geometry_msgs/msg'], 'vision_msgs': ['/home/test/Downloads/190816_cmtm_code/catkin_ws/src/vision_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::rosjava_custom_srv::PredicateServiceRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rosjava_custom_srv::PredicateServiceRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rosjava_custom_srv::PredicateServiceRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rosjava_custom_srv::PredicateServiceRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rosjava_custom_srv::PredicateServiceRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rosjava_custom_srv::PredicateServiceRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rosjava_custom_srv::PredicateServiceRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "380fc1b6cb3cf53bfd53599189a579bc";
  }

  static const char* value(const ::rosjava_custom_srv::PredicateServiceRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x380fc1b6cb3cf53bULL;
  static const uint64_t static_value2 = 0xfd53599189a579bcULL;
};

template<class ContainerAllocator>
struct DataType< ::rosjava_custom_srv::PredicateServiceRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rosjava_custom_srv/PredicateServiceRequest";
  }

  static const char* value(const ::rosjava_custom_srv::PredicateServiceRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rosjava_custom_srv::PredicateServiceRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string[] predicate\n\
string[] param1\n\
string[] param2\n\
string[] param3\n\
string[] param4\n\
";
  }

  static const char* value(const ::rosjava_custom_srv::PredicateServiceRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rosjava_custom_srv::PredicateServiceRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.predicate);
      stream.next(m.param1);
      stream.next(m.param2);
      stream.next(m.param3);
      stream.next(m.param4);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PredicateServiceRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rosjava_custom_srv::PredicateServiceRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rosjava_custom_srv::PredicateServiceRequest_<ContainerAllocator>& v)
  {
    s << indent << "predicate[]" << std::endl;
    for (size_t i = 0; i < v.predicate.size(); ++i)
    {
      s << indent << "  predicate[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.predicate[i]);
    }
    s << indent << "param1[]" << std::endl;
    for (size_t i = 0; i < v.param1.size(); ++i)
    {
      s << indent << "  param1[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.param1[i]);
    }
    s << indent << "param2[]" << std::endl;
    for (size_t i = 0; i < v.param2.size(); ++i)
    {
      s << indent << "  param2[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.param2[i]);
    }
    s << indent << "param3[]" << std::endl;
    for (size_t i = 0; i < v.param3.size(); ++i)
    {
      s << indent << "  param3[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.param3[i]);
    }
    s << indent << "param4[]" << std::endl;
    for (size_t i = 0; i < v.param4.size(); ++i)
    {
      s << indent << "  param4[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.param4[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROSJAVA_CUSTOM_SRV_MESSAGE_PREDICATESERVICEREQUEST_H
